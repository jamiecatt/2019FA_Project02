// Particles Link: https://p5js.org/examples/simulate-particle-system.html

// Copyright (c) 2019 ml5
//
// This software is released under the MIT License.
// https://opensource.org/licenses/MIT

/* ===
ml5 Example
Real time Object Detection using YOLO and p5.js
=== */

let video;
let yolo;
let status;
let system;
let objects = [];

function setup() {
  createCanvas(320, 240);
  system = new ParticleSystem(createVector(width / 2, 50));
  video = createCapture(VIDEO);
  video.size(320, 240);

  // Create a YOLO method
  yolo = ml5.YOLO(video, startDetecting);

  // Hide the original video
  video.hide();
  status = select('#status');
}

function draw() {
  image(video, 0, 0, width, height);
  for (let i = 0; i < objects.length; i++) {
    
    
//     noStroke();
//     fill(0, 255, 0);
//     text(objects[i].label, objects[i].x * width, objects[i].y * height - 5);
//     noFill();
//     strokeWeight(4);
//     stroke(0, 255, 0);
//     rect(objects[i].x * width, objects[i].y * height, objects[i].w * width, objects[i].h * height);  // Defining position detected?
  
  if (objects[i].label == "person") {
    background (50); 
    noStroke();
    fill(0);
    
    //Draw Particles 
  system.addParticle(); //Add position here?
  system.run();
}
  
  }
}

function startDetecting() {
  status.html('Model loaded!');
  detect();
}

function detect() {
  yolo.detect(function(err, results) {
    objects = results;
    detect();
  });
}

// A simple Particle class
let Particle = function(position) {
  this.acceleration = createVector(0, 0.05);
  this.velocity = createVector(random(-1, 1), random(-1, 0));
  this.position = position.copy();
  this.lifespan = 255;
};

Particle.prototype.run = function() 
{
   for (let i = 0; i < objects.length; i++) {
  this.update(objects[i].x * width, objects[i].y * height);
  this.display(objects[i].x * width, objects[i].y * height);
}
};

// Method to update position
Particle.prototype.update = function(){
  this.velocity.add(this.acceleration);
  this.position.add(this.velocity);
  this.lifespan -= 2;
};

// Method to display
Particle.prototype.display = function() {
  stroke(200, this.lifespan);
  strokeWeight(2);
  fill(127, this.lifespan);
  ellipse(this.position.x, this.position.y, 12, 12); // Particle Position
};

// Is the particle still useful?
Particle.prototype.isDead = function(){
  return this.lifespan < 0;
};

let ParticleSystem = function(position) {
  this.origin = position.copy();
  this.particles = [];
};

ParticleSystem.prototype.addParticle = function() {
  this.particles.push(new Particle(this.origin));
};

ParticleSystem.prototype.run = function() {
  for (let i = this.particles.length-1; i >= 0; i--) {
    let p = this.particles[i];
    p.run();
    if (p.isDead()) {
      this.particles.splice(i, 1);
    }
  }
};
